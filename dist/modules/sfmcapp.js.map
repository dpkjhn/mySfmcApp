{"version":3,"sources":["../../src/modules/sfmcapp.js"],"names":["bodyParser","rp","h","cb","SfmcApp","constructor","id","secret","clientId","clientSecret","tokenId","tokenExpiry","authEndpoint","hostRestEndpoint","version","catTree","requestType","Auth","endPoint","method","body","Context","JourneyBuilder","GetSchema","InsertDataByKey","InsertDERecords","SendSms","QueueSms","CreateCBFolder","InsertCBAsset","InsertImage","GetCBAsset","UpdateCBAsset","isAutheticated","authenticate","console","log","Promise","resolve","reject","submitRequest","then","r","accessToken","expiresIn","catch","e","options","uri","replace","payLoad","headers","Authorization","json","checkContext","enterprise","getSchema","insertRecordsByKey","deKey","items","length","insertRecords","JSON","stringify","sendSms","message","mobileNumbers","keyword","Subscribe","Resubscribe","Override","messageText","createCBFolder","folderPath","parentId","getAllCategories","parentFolder","slice","lastIndexOf","folderName","findCategory","Name","ParentId","getAllCBCategories","assetType","name","displayName","Description","Category","file","img","getCBAsset","insertCBAsset","base64_encode","insertCBContentBlock","folder","blockHtml","content"],"mappings":"AAAA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,OAAOA,UAAP,MAAuB,aAAvB;AACA,OAAOC,EAAP,MAAe,iBAAf;AACA,OAAOC,CAAP,MAAc,kBAAd;AACA,OAAOC,EAAP,MAAe,wBAAf;;AAEA;;AAEA;AACA;;;;;;AAMA,eAAe,MAAMC,OAAN,CAAc;AACzBC,gBAAYC,EAAZ,EAAgBC,MAAhB,EAAwB;AACpB,aAAKC,QAAL,GAAgBF,EAAhB;AACA,aAAKG,YAAL,GAAoBF,MAApB;AACA,aAAKG,OAAL,GAAe,IAAf;AACA,aAAKC,WAAL,GAAmB,CAAnB;AACA,aAAKC,YAAL,GAAoB,kCAApB;AACA,aAAKC,gBAAL,GAAwB,iCAAxB;AACA,aAAKC,OAAL,GAAe,OAAf;AACA,aAAKC,OAAL,GAAe,IAAf;;AAEA,aAAKC,WAAL,GAAmB;AACf;AACAC,kBAAM;AACFC,0BAAU,KAAKN,YAAL,GAAoB,kBAD5B;AAEFO,wBAAQ,MAFN;AAGFC,sBAAM;AACFZ,8BAAU,KAAKA,QADb;AAEFC,kCAAc,KAAKA;AAFjB;AAHJ,aAFS;AAUfY,qBAAS;AACLH,0BAAU,KAAKL,gBAAL,GAAwB,2BAD7B;AAELM,wBAAQ;AAFH,aAVM;AAcf;AACAG,4BAAgB;AACZJ,0BAAU,KAAKL,gBADH;AAEZM,wBAAQ;AAFI,aAfD;;AAoBf;AACAI,uBAAW;AACPL,0BAAU,KAAKL,gBAAL,GAAwB,qBAD3B;AAEPM,wBAAQ;AAFD,aArBI;AAyBfK,6BAAiB;AACbN,0BAAU,KAAKL,gBAAL,GAAwB,oCADrB;AAEbM,wBAAQ;AAFK,aAzBF;AA6BfM,6BAAiB;AACbP,0BAAU,KAAKL,gBAAL,GAAwB,6CADrB;AAEbM,wBAAQ;AAFK,aA7BF;;AAkCf;AACAO,qBAAS;AACLR,0BAAU,KAAKL,gBAAL,GAAwB,kCAD7B;AAELM,wBAAQ;AAFH,aAnCM;AAuCfQ,sBAAU;AACNT,0BAAU,KAAKL,gBAAL,GAAwB,iBAD5B;AAENM,wBAAQ;AAFF,aAvCK;;AA4Cf;AACAS,4BAAgB;AACZV,0BAAU,KAAKL,gBAAL,GAAwB,8BADtB;AAEZM,wBAAQ;AAFI,aA7CD;AAiDfU,2BAAe;AACXX,0BAAU,KAAKL,gBAAL,GAAwB,0BADvB;AAEXM,wBAAQ;AAFG,aAjDA;AAqDfW,yBAAa;AACTZ,0BAAU,KAAKL,gBAAL,GAAwB,0BADzB;AAETM,wBAAQ;AAFC,aArDE;AAyDfY,wBAAY;AACRb,0BAAU,KAAKL,gBAAL,GAAwB,mCAD1B;AAERM,wBAAQ;AAFA,aAzDG;AA6Dfa,2BAAe;AACXd,0BAAU,KAAKL,gBAAL,GAAwB,8BADvB;AAEXM,wBAAQ;AAFG;AA7DA,SAAnB;AAkEH;;AAED,QAAIc,cAAJ,GAAqB;AACjB;AACA;AACA;;AAEA,eAAO,KAAKvB,OAAZ;AACH;;AAEDwB,iBAAaxB,UAAU,EAAvB,EAA2B;AACvByB,gBAAQC,GAAR,CAAa,oBAAmB,KAAK5B,QAAS,EAA9C;AACA,aAAKE,OAAL,GAAeA,OAAf;;AAEA,YAAI,KAAKuB,cAAT,EAAyB;AACrB,mBAAO,IAAII,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCD,wBAAQ,KAAK5B,OAAb;AACH,aAFM,CAAP;AAGH;;AAED,eAAO,KAAK8B,aAAL,CAAmB,MAAnB,EACFC,IADE,CACGC,KAAK;AACP,iBAAKhC,OAAL,GAAegC,EAAEC,WAAjB;AACA,iBAAKhC,WAAL,GAAmB+B,EAAEE,SAArB;AACAT,oBAAQC,GAAR,CAAa,mBAAkB,KAAK1B,OAAQ,EAA5C;AACA;;AAEA,mBAAO,KAAKA,OAAZ;AACH,SARE,EASFmC,KATE,CASIC,KAAK;AACR,iBAAKpC,OAAL,GAAe,IAAf;AACAyB,oBAAQC,GAAR,CAAY,YAAYU,CAAxB;AACA,mBAAO,KAAKpC,OAAZ;AACH,SAbE,CAAP;AAcH;;AAED8B,kBAAcxB,WAAd,EAA2B+B,OAA3B,EAAoC;AAChC;;AAEA,YAAIC,MAAM,KAAKhC,WAAL,CAAiBA,WAAjB,EAA8BE,QAAxC;AACA,YAAIE,OAAO,KAAKJ,WAAL,CAAiBA,WAAjB,EAA8BI,IAAzC;;AAEA,YAAI2B,OAAJ,EAAa;AACTC,kBAAM,KAAKhC,WAAL,CAAiBA,WAAjB,EAA8BE,QAA9B,CAAuC+B,OAAvC,CAAgD,MAAhD,EAAuDF,QAAQzC,EAA/D,CAAN,CADS,CACiE;AAC1Ec,mBAAO2B,QAAQ3B,IAAf;AACH;;AAED,YAAI8B,UAAU;AACV/B,oBAAQ,KAAKH,WAAL,CAAiBA,WAAjB,EAA8BG,MAD5B;AAEV6B,iBAAKA,GAFK;AAGVG,qBAAS;AACL,gCAAgB,kBADX;AAELC,+BAAgB,UAAS,KAAK1C,OAAQ;AAFjC,aAHC;AAOVU,kBAAMA,IAPI;AAQViC,kBAAM;AARI,SAAd;;AAWA;;AAEA;AACAlB,gBAAQC,GAAR,CAAa,GAAEc,QAAQ/B,MAAO,IAAG+B,QAAQF,GAAI,EAA7C;;AAEA,eAAO/C,GAAGiD,OAAH,CAAP;AACA;AACH;;AAEDI,mBAAe;AACX,aAAKd,aAAL,CAAmB,SAAnB,EACKC,IADL,CACUC,KAAK;AACPP,oBAAQC,GAAR,CAAa,QAAOM,EAAEa,UAAF,CAAajD,EAAG,EAApC;AACA,mBAAO,IAAP;AACH,SAJL,EAKKuC,KALL,CAKWC,KAAK;AACRX,oBAAQC,GAAR,CAAa,GAAEU,CAAE,EAAjB;AACA,mBAAO,KAAP;AACH,SARL;AASH;;AAEDU,gBAAY;AACR,eAAO,KAAKhB,aAAL,CAAmB,WAAnB,EACFC,IADE,CACGC,KAAK;AACPP,oBAAQC,GAAR,CAAYM,CAAZ;;AAEA,mBAAOA,CAAP;AACH,SALE,EAMFG,KANE,CAMIC,KAAK;AACRX,oBAAQC,GAAR,CAAa,GAAEU,CAAE,EAAjB;AACA,mBAAO,KAAP;AACH,SATE,CAAP;AAUH;;AAEDW,uBAAmBC,KAAnB,EAA0BC,KAA1B,EAAiC;AAC7B,cAAMZ,UAAU;AACZzC,gBAAK,GAAEoD,KAAM,EADD;AAEZtC,kBAAMuC;AAFM,SAAhB;AAIAxB,gBAAQC,GAAR,CAAa,sBAAqBuB,MAAMC,MAAO,mBAAkBF,KAAM,EAAvE;;AAEA;;AAEA,eAAO,KAAKlB,aAAL,CAAmB,iBAAnB,EAAsCO,OAAtC,EACFN,IADE,CACGC,KAAK;AACPP,oBAAQC,GAAR,CAAa,GAAEM,EAAEkB,MAAO,sBAAxB;;AAEA;AACH,SALE,EAMFf,KANE,CAMIC,KAAK;AACRX,oBAAQC,GAAR,CAAa,GAAEU,CAAE,EAAjB;AACA,mBAAO,KAAP;AACH,SATE,CAAP;AAUH;;AAEDe,kBAAcH,KAAd,EAAqBC,KAArB,EAA4B;AACxB,cAAMZ,UAAU;AACZzC,gBAAK,GAAEoD,KAAM,EADD;AAEZtC,kBAAMuC;AAFM,SAAhB;AAIAxB,gBAAQC,GAAR,CAAa,sBAAqBuB,MAAMC,MAAO,mBAAkBF,KAAM,EAAvE;;AAEAvB,gBAAQC,GAAR,CAAY0B,KAAKC,SAAL,CAAehB,QAAQ3B,IAAvB,CAAZ;;AAEA,eAAO,KAAKoB,aAAL,CAAmB,iBAAnB,EAAsCO,OAAtC,EACFN,IADE,CACGC,KAAK;AACPP,oBAAQC,GAAR,CAAa,GAAEM,EAAEkB,MAAO,sBAAxB;;AAEA;AACH,SALE,EAMFf,KANE,CAMIC,KAAK;AACRX,oBAAQC,GAAR,CAAa,GAAEU,CAAE,EAAjB;AACA,mBAAO,KAAP;AACH,SATE,CAAP;AAUH;;AAED;;AAEAkB,YAAQC,OAAR,EAAiBC,aAAjB,EAAgCC,OAAhC,EAAyC;AACrC,cAAMpB,UAAU;AACZzC,gBAAI,YADQ;AAEZc,kBAAM;AACF8C,+BAAeA,aADb;AAEFE,2BAAW,IAFT;AAGFC,6BAAa,IAHX;AAIFF,yBAASA,OAJP,EAIgB;AAClBG,0BAAU,IALR;AAMFC,6BAAaN;AANX;AAFM,SAAhB;;AAYA,eAAO,KAAKzB,aAAL,CAAmB,SAAnB,EAA8BO,OAA9B,EACFN,IADE,CACGC,KAAK;AACPP,oBAAQC,GAAR,CAAa,cAAb;AACA,mBAAOM,EAAEhC,OAAT;;AAEA;AACH,SANE,EAOFmC,KAPE,CAOIC,KAAK;AACRX,oBAAQC,GAAR,CAAa,GAAEU,CAAE,EAAjB;AACA,mBAAO,KAAP;AACH,SAVE,CAAP;AAWH;;AAED;AACA0B,mBAAeC,UAAf,EAA2BC,WAAW,CAAtC,EAAyC;AACrC,YAAI,CAAC,KAAK3D,OAAV,EAAmB,KAAKA,OAAL,GAAeZ,GAAGwE,gBAAH,EAAf;;AAEnB,YAAIC,eAAeH,WAAWI,KAAX,CAAiB,CAAjB,EAAoBJ,WAAWK,WAAX,CAAuB,GAAvB,CAApB,CAAnB;AAAA,YACIC,aAAaN,WAAWI,KAAX,CAAiBJ,WAAWK,WAAX,CAAuB,GAAvB,IAA8B,CAA/C,CADjB;;AAGA;AACA3C,gBAAQC,GAAR,CAAY,oBAAoBqC,UAAhC;;AAEAC,mBAAWA,YAAYvE,GAAG6E,YAAH,CAAgB,KAAKjE,OAArB,EAA8B6D,YAA9B,CAAvB,CATqC,CAS+B;;AAEpE,cAAM7B,UAAU;AACZ3B,kBAAM;AACF6D,sBAAMF,UADJ;AAEFG,0BAAUR;AAFR;AADM,SAAhB;AAMA;;AAEA,eAAO,KAAKlC,aAAL,CAAmB,gBAAnB,EAAqCO,OAArC,EACFN,IADE,CACGC,KAAK;AACPP,oBAAQC,GAAR,CAAa,mBAAkBM,EAAEpC,EAAG,EAApC;AACA,mBAAOoC,EAAEpC,EAAT;AACH,SAJE,EAKFuC,KALE,CAKIC,KAAK;AACRX,oBAAQC,GAAR,CAAa,GAAEU,CAAE,EAAjB;AACA,kBAAMA,CAAN;AACA;AACH,SATE,CAAP;AAUH;;AAEDqC,yBAAqB;AACjB,YAAIpE,UAAU,EAAd;;AAEA,cAAMgC,UAAU;AACZ3B,kBAAM;AACFgE,2BAAW;AACP9E,wBAAI,EADG;AAEP+E,0BAAM,KAFC;AAGPC,iCAAa;AAHN,iBADT;AAMFL,sBAAMI,IANJ;AAOFE,6BAAaF,IAPX;AAQFG,0BAAU;AACNlF,wBAAIoE;AADE,iBARR;AAWFe,sBAAMC;AAXJ;AADM,SAAhB;AAeA,eAAO3E,OAAP;AACH;;AAED4E,eAAWrF,EAAX,EAAe;AACX,cAAMyC,UAAU;AACZzC,gBAAIA,EADQ;AAEZc,kBAAM;AAFM,SAAhB;;AAKA,eAAO,KAAKoB,aAAL,CAAmB,YAAnB,EAAiCO,OAAjC,EACFN,IADE,CACGC,KAAK;AACP,mBAAOA,CAAP;AACH,SAHE,EAIFG,KAJE,CAIIC,KAAK;AACRX,oBAAQC,GAAR,CAAa,GAAEU,CAAE,EAAjB;AACA,mBAAO,KAAP;AACH,SAPE,CAAP;AAQH;;AAED8C,kBAAcH,IAAd,EAAoBJ,IAApB,EAA0BX,QAA1B,EAAoC;AAChC;;AAEA;;AAEA,YAAIgB,MAAMxF,EAAE2F,aAAF,CAAgBJ,IAAhB,CAAV;;AAEA,cAAM1C,UAAU;AACZ3B,kBAAM;AACFgE,2BAAW;AACP9E,wBAAI,EADG;AAEP+E,0BAAM,KAFC;AAGPC,iCAAa;AAHN,iBADT;AAMFL,sBAAMI,IANJ;AAOFE,6BAAaF,IAPX;AAQFG,0BAAU;AACNlF,wBAAIoE;AADE,iBARR;AAWFe,sBAAMC;AAXJ;AADM,SAAhB;;AAgBA;AACA;;AAEA;;AAEA,eAAO,KAAKlD,aAAL,CAAmB,eAAnB,EAAoCO,OAApC,EACFN,IADE,CACGC,KAAK;AACP,mBAAOA,CAAP;AACH,SAHE,EAIFG,KAJE,CAIIC,KAAK;AACRX,oBAAQC,GAAR,CAAa,GAAEU,CAAE,EAAjB;AACA,kBAAMA,CAAN;;AAEA;AACH,SATE,CAAP;AAUH;;AAEDgD,yBAAqBT,IAArB,EAA2BU,MAA3B,EAAmCC,SAAnC,EAA8C;AAC1C,cAAMjD,UAAU;AACZ3B,kBAAM;AACFgE,2BAAW;AACP9E,wBAAI,GADG;AAEP+E,0BAAM,eAFC;AAGPC,iCAAa;AAHN,iBADT;AAMFL,sBAAMI,IANJ;AAOFE,6BAAaF,IAPX;AAQFG,0BAAU;AACNlF,wBAAIyF;AADE,iBARR;AAWFE,yBAASD;AAXP;AADM,SAAhB;;AAgBA;;AAEA,eAAO,KAAKxD,aAAL,CAAmB,eAAnB,EAAoCO,OAApC,EACFN,IADE,CACGC,KAAK;AACP,mBAAOA,CAAP;AACH,SAHE,EAIFG,KAJE,CAIIC,KAAK;AACRX,oBAAQC,GAAR,CAAa,GAAEU,CAAE,EAAjB;AACA,kBAAMA,CAAN;;AAEA;AACH,SATE,CAAP;AAUH;AAzXwB","file":"sfmcapp.js","sourcesContent":["/*eslint quotes: [\"error\", \"single\", { \"allowTemplateLiterals\": true }]*/\n\n'use strict';\n\n// var bodyParser = require('body-parser');\n// var request = require('request');\n// var rp = require('request-promise');\n// var Promise = require('promise');\n\nimport bodyParser from 'body-parser';\nimport rp from 'request-promise';\nimport h from './sfmc-helper.js';\nimport cb from './sfmc-content-builder';\n\n// import requestType from './sfmc-requests';\n\n// module.exports.SfmcApp;\n/**\n * Wrapper for Marketing Cloud API\n *\n * @export\n * @class SfmcApp\n */\nexport default class SfmcApp {\n    constructor(id, secret) {\n        this.clientId = id;\n        this.clientSecret = secret;\n        this.tokenId = null;\n        this.tokenExpiry = 0;\n        this.authEndpoint = 'https://auth.exacttargetapis.com';\n        this.hostRestEndpoint = 'https://www.exacttargetapis.com';\n        this.version = '0.0.1';\n        this.catTree = null;\n\n        this.requestType = {\n            // General requests\n            Auth: {\n                endPoint: this.authEndpoint + '/v1/requestToken',\n                method: 'POST',\n                body: {\n                    clientId: this.clientId,\n                    clientSecret: this.clientSecret\n                }\n            },\n            Context: {\n                endPoint: this.hostRestEndpoint + '/platform/v1/tokenContext',\n                method: 'GET'\n            },\n            // Journey Builder requests\n            JourneyBuilder: {\n                endPoint: this.hostRestEndpoint,\n                method: 'POST'\n            },\n\n            // DE requests\n            GetSchema: {\n                endPoint: this.hostRestEndpoint + '/contacts/v1/schema',\n                method: 'GET'\n            },\n            InsertDataByKey: {\n                endPoint: this.hostRestEndpoint + '/hub/v1/dataevents/key:{id}/rowset',\n                method: 'POST'\n            },\n            InsertDERecords: {\n                endPoint: this.hostRestEndpoint + '/data/v1/async/dataextensions/{id}:key/rows',\n                method: 'POST'\n            },\n\n            //Mobile Connect Requests\n            SendSms: {\n                endPoint: this.hostRestEndpoint + '/sms/v1/messageContact/{id}/send',\n                method: 'POST'\n            },\n            QueueSms: {\n                endPoint: this.hostRestEndpoint + '/sms/v1/queueMO',\n                method: 'POST'\n            },\n\n            // Content Builder requests\n            CreateCBFolder: {\n                endPoint: this.hostRestEndpoint + '/asset/v1/content/categories',\n                method: 'POST'\n            },\n            InsertCBAsset: {\n                endPoint: this.hostRestEndpoint + '/asset/v1/content/assets',\n                method: 'POST'\n            },\n            InsertImage: {\n                endPoint: this.hostRestEndpoint + '/asset/v1/content/assets',\n                method: 'POST'\n            },\n            GetCBAsset: {\n                endPoint: this.hostRestEndpoint + '/asset/v1/content/categories/{id}',\n                method: 'GET'\n            },\n            UpdateCBAsset: {\n                endPoint: this.hostRestEndpoint + '/asset/v1/content/categories',\n                method: 'POST'\n            }\n        };\n    }\n\n    get isAutheticated() {\n        //TODO\n        // this.checkContext();\n        // this.tokenId = '';\n\n        return this.tokenId;\n    }\n\n    authenticate(tokenId = '') {\n        console.log(`Auth request for ${this.clientId}`);\n        this.tokenId = tokenId;\n\n        if (this.isAutheticated) {\n            return new Promise((resolve, reject) => {\n                resolve(this.tokenId);\n            });\n        }\n\n        return this.submitRequest('Auth')\n            .then(r => {\n                this.tokenId = r.accessToken;\n                this.tokenExpiry = r.expiresIn;\n                console.log(`Received token: ${this.tokenId}`);\n                // console.log('Authorization Success');\n\n                return this.tokenId;\n            })\n            .catch(e => {\n                this.tokenId = null;\n                console.log('ERROR: ' + e);\n                return this.tokenId;\n            });\n    }\n\n    submitRequest(requestType, options) {\n        // console.log(options.id);\n\n        let uri = this.requestType[requestType].endPoint;\n        let body = this.requestType[requestType].body;\n\n        if (options) {\n            uri = this.requestType[requestType].endPoint.replace(`{id}`, options.id); // some requests need a key, id etc.\n            body = options.body;\n        }\n\n        let payLoad = {\n            method: this.requestType[requestType].method,\n            uri: uri,\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${this.tokenId}`\n            },\n            body: body,\n            json: true\n        };\n\n        // console.log(JSON.stringify(payLoad));\n\n        // console.log(`Request (${requestType}): ${payLoad.method} ${payLoad.uri}`);\n        console.log(`${payLoad.method} ${payLoad.uri}`);\n\n        return rp(payLoad);\n        // return response;\n    }\n\n    checkContext() {\n        this.submitRequest('Context')\n            .then(r => {\n                console.log(`MID: ${r.enterprise.id}`);\n                return true;\n            })\n            .catch(e => {\n                console.log(`${e}`);\n                return false;\n            });\n    }\n\n    getSchema() {\n        return this.submitRequest('GetSchema')\n            .then(r => {\n                console.log(r);\n\n                return r;\n            })\n            .catch(e => {\n                console.log(`${e}`);\n                return false;\n            });\n    }\n\n    insertRecordsByKey(deKey, items) {\n        const options = {\n            id: `${deKey}`,\n            body: items\n        };\n        console.log(`Insert request for ${items.length} record(s) into ${deKey}`);\n\n        // console.log('Items: ' + JSON.stringify(options.body));\n\n        return this.submitRequest('InsertDataByKey', options)\n            .then(r => {\n                console.log(`${r.length} record(s) inserted.`);\n\n                // console.log(r);\n            })\n            .catch(e => {\n                console.log(`${e}`);\n                return false;\n            });\n    }\n\n    insertRecords(deKey, items) {\n        const options = {\n            id: `${deKey}`,\n            body: items\n        };\n        console.log(`Insert request for ${items.length} record(s) into ${deKey}`);\n\n        console.log(JSON.stringify(options.body));\n\n        return this.submitRequest('InsertDERecords', options)\n            .then(r => {\n                console.log(`${r.length} record(s) inserted.`);\n\n                // console.log(r);\n            })\n            .catch(e => {\n                console.log(`${e}`);\n                return false;\n            });\n    }\n\n    // Mobile Connect\n\n    sendSms(message, mobileNumbers, keyword) {\n        const options = {\n            id: 'Njg6Nzg6MA',\n            body: {\n                mobileNumbers: mobileNumbers,\n                Subscribe: true,\n                Resubscribe: true,\n                keyword: keyword, // needed because we are subscribing/resubscribing\n                Override: true,\n                messageText: message\n            }\n        };\n\n        return this.submitRequest('SendSms', options)\n            .then(r => {\n                console.log(`SMS(s) sent.`);\n                return r.tokenId;\n\n                // console.log(r);\n            })\n            .catch(e => {\n                console.log(`${e}`);\n                return false;\n            });\n    }\n\n    // Content Builder\n    createCBFolder(folderPath, parentId = 0) {\n        if (!this.catTree) this.catTree = cb.getAllCategories();\n\n        let parentFolder = folderPath.slice(0, folderPath.lastIndexOf('/')),\n            folderName = folderPath.slice(folderPath.lastIndexOf('/') + 1);\n\n        // cb.findTopCategoryId(catTree);\n        console.log('create folder: ' + folderPath);\n\n        parentId = parentId || cb.findCategory(this.catTree, parentFolder); // default to top level\n\n        const options = {\n            body: {\n                Name: folderName,\n                ParentId: parentId\n            }\n        };\n        // cb.buildCategoryTree();\n\n        return this.submitRequest('CreateCBFolder', options)\n            .then(r => {\n                console.log(`Folder created: ${r.id}`);\n                return r.id;\n            })\n            .catch(e => {\n                console.log(`${e}`);\n                throw e;\n                // return false;\n            });\n    }\n\n    getAllCBCategories() {\n        let catTree = '';\n\n        const options = {\n            body: {\n                assetType: {\n                    id: 20,\n                    name: 'png',\n                    displayName: 'Image'\n                },\n                Name: name,\n                Description: name,\n                Category: {\n                    id: parentId\n                },\n                file: img\n            }\n        };\n        return catTree;\n    }\n\n    getCBAsset(id) {\n        const options = {\n            id: id,\n            body: {}\n        };\n\n        return this.submitRequest('GetCBAsset', options)\n            .then(r => {\n                return r;\n            })\n            .catch(e => {\n                console.log(`${e}`);\n                return false;\n            });\n    }\n\n    insertCBAsset(file, name, parentId) {\n        // if (!this.catTree) this.catTree = cb.getAllCategories();\n\n        // let id = cb.findCategory(this.catTree, folder).id;\n\n        let img = h.base64_encode(file);\n\n        const options = {\n            body: {\n                assetType: {\n                    id: 20,\n                    name: 'png',\n                    displayName: 'Image'\n                },\n                Name: name,\n                Description: name,\n                Category: {\n                    id: parentId\n                },\n                file: img\n            }\n        };\n\n        // console.log(JSON.stringify(options, null, 2));\n        // console.log('insert: ' + folder + ' ' + id);\n\n        // return;\n\n        return this.submitRequest('InsertCBAsset', options)\n            .then(r => {\n                return r;\n            })\n            .catch(e => {\n                console.log(`${e}`);\n                throw e;\n\n                // return false;\n            });\n    }\n\n    insertCBContentBlock(name, folder, blockHtml) {\n        const options = {\n            body: {\n                assetType: {\n                    id: 195,\n                    name: 'freeformblock',\n                    displayName: 'Free Form Block'\n                },\n                Name: name,\n                Description: name,\n                Category: {\n                    id: folder\n                },\n                content: blockHtml\n            }\n        };\n\n        // console.log(options);\n\n        return this.submitRequest('InsertCBAsset', options)\n            .then(r => {\n                return r;\n            })\n            .catch(e => {\n                console.log(`${e}`);\n                throw e;\n\n                // return false;\n            });\n    }\n}"]}