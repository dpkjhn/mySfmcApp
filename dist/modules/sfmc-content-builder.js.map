{"version":3,"sources":["../../src/modules/sfmc-content-builder.js"],"names":["fs","require","buildCategoryTree","categories","parentId","category","filter","forEach","childCategory","name","id","categoryType","description","findTopCategoryId","root","length","err","findCategory","categoryTree","namePath","endsWith","concat","startsWith","slice","categoryName","indexOf","nextCategoryName","substr","key","getAllCategories","hostRestEndpoint","endPoint","JSON","parse","readFileSync","__dirname","catTree","module","exports"],"mappings":"AAAA;;AACA,IAAIA,KAAKC,QAAQ,IAAR,CAAT;;AAEA,IAAIC,oBAAoB,CAACC,UAAD,EAAaC,WAAW,CAAxB,KAA8B;AAClD,QAAIC,WAAW,EAAf;;AAEAF,eACKG,MADL,CACYD,YAAY;AAChB;;AAEA,eAAOA,SAASD,QAAT,KAAsBA,QAA7B;AACH,KALL,EAMKG,OANL,CAMaC,iBAAiB;AACtBH,iBAASG,cAAcC,IAAvB,IAA+BP,kBAC3BC,UAD2B,EAE3BK,cAAcE,EAFa,CAA/B;AAIAL,iBAASG,cAAcC,IAAvB,EAA6BC,EAA7B,GAAkCF,cAAcE,EAAhD;AACAL,iBAASG,cAAcC,IAAvB,EAA6BL,QAA7B,GAAwCI,cAAcJ,QAAtD;AACAC,iBAASG,cAAcC,IAAvB,EAA6BA,IAA7B,GAAoCD,cAAcC,IAAlD;AACAJ,iBAASG,cAAcC,IAAvB,EAA6BE,YAA7B,GAA4CH,cAAcG,YAA1D;AACAN,iBAASG,cAAcC,IAAvB,EAA6BG,WAA7B,GAA2CJ,cAAcI,WAAzD;AACH,KAhBL;;AAkBA;;AAEA,WAAOP,QAAP;AACH,CAxBD;;AA0BA,IAAIQ,oBAAoBV,cAAc;AAClC;AACA,QAAI;AACA,YAAIW,OAAOX,WAAWG,MAAX,CAAkBD,YAAY;AACrC,mBAAOA,SAASD,QAAT,KAAsB,CAA7B;AACH,SAFU,CAAX;;AAIA,YAAIU,QAAQA,KAAKC,MAAL,IAAe,CAA3B,EAA8B,OAAOD,KAAK,CAAL,EAAQJ,EAAf;AACjC,KAND,CAME,OAAOM,GAAP,EAAY;AACV,eAAO,CAAP;AACH;AACJ,CAXD;;AAaA,IAAIC,eAAe,CAACC,YAAD,EAAeC,WAAW,iBAA1B,KAAgD;AAC/D,QAAI,CAACA,SAASC,QAAT,CAAkB,GAAlB,CAAL,EAA6BD,WAAWA,SAASE,MAAT,CAAgB,GAAhB,CAAX;AAC7B,QAAIF,SAASG,UAAT,CAAoB,GAApB,CAAJ,EAA8BH,WAAWA,SAASI,KAAT,CAAe,CAAf,CAAX;;AAE9B,QAAIC,eAAeL,SAASI,KAAT,CAAe,CAAf,EAAkBJ,SAASM,OAAT,CAAiB,GAAjB,CAAlB,CAAnB;AACA,QAAIC,mBAAmBP,SAASQ,MAAT,CAAgBH,aAAaT,MAAb,GAAsB,CAAtC,CAAvB;;AAEA;;AAEA;AACA,QAAI,CAACW,iBAAiBX,MAAlB,IAA4BG,aAAaM,YAAb,CAAhC,EACI,OAAON,aAAaM,YAAb,CAAP;;AAEJ,SAAK,IAAII,GAAT,IAAgBV,YAAhB,EAA8B;AAC1B,YAAIU,QAAQJ,YAAR,IAAwBE,gBAA5B,EACI,OAAOT,aAAaC,aAAaU,GAAb,CAAb,EAAgCF,gBAAhC,CAAP;AACP;AACJ,CAjBD;;AAmBA,IAAIG,mBAAmB,MAAM;AACzB,QAAIC,mBAAmB,iCAAvB;;AAEA,QAAIC,WACAD,mBAAmB,kDADvB;;AAGA;;AAEA,QAAI3B,aAAa6B,KAAKC,KAAL,CAAWjC,GAAGkC,YAAH,CAAgBC,YAAY,kBAA5B,CAAX,CAAjB;;AAEA,QAAIC,UAAUlC,kBAAkBC,UAAlB,CAAd;;AAEA,WAAOiC,OAAP;AACH,CAbD;;AAeAC,OAAOC,OAAP,GAAiB;AACbpC,uBAAmBA,iBADN;AAEbW,uBAAmBA,iBAFN;AAGbI,kBAAcA,YAHD;AAIbY,sBAAkBA;AAJL,CAAjB","file":"sfmc-content-builder.js","sourcesContent":["'use strict';\nvar fs = require('fs');\n\nlet buildCategoryTree = (categories, parentId = 0) => {\n    let category = {};\n\n    categories\n        .filter(category => {\n            // console.log(category.name);\n\n            return category.parentId === parentId;\n        })\n        .forEach(childCategory => {\n            category[childCategory.name] = buildCategoryTree(\n                categories,\n                childCategory.id\n            );\n            category[childCategory.name].id = childCategory.id;\n            category[childCategory.name].parentId = childCategory.parentId;\n            category[childCategory.name].name = childCategory.name;\n            category[childCategory.name].categoryType = childCategory.categoryType;\n            category[childCategory.name].description = childCategory.description;\n        });\n\n    // console.log(category);\n\n    return category;\n};\n\nlet findTopCategoryId = categories => {\n    // return jsonpath.value(categories, `$..[?(@.parentId==0)]`).id;\n    try {\n        let root = categories.filter(category => {\n            return category.parentId === 0;\n        });\n\n        if (root && root.length == 1) return root[0].id;\n    } catch (err) {\n        return 0;\n    }\n};\n\nlet findCategory = (categoryTree, namePath = 'Content Builder') => {\n    if (!namePath.endsWith('/')) namePath = namePath.concat('/');\n    if (namePath.startsWith('/')) namePath = namePath.slice(1);\n\n    let categoryName = namePath.slice(0, namePath.indexOf('/'));\n    let nextCategoryName = namePath.substr(categoryName.length + 1);\n\n    // console.log('-->' + categoryName);\n\n    // if no more to search and key is the same as\n    if (!nextCategoryName.length && categoryTree[categoryName])\n        return categoryTree[categoryName];\n\n    for (let key in categoryTree) {\n        if (key === categoryName && nextCategoryName)\n            return findCategory(categoryTree[key], nextCategoryName);\n    }\n};\n\nlet getAllCategories = () => {\n    let hostRestEndpoint = 'https://www.exacttargetapis.com';\n\n    let endPoint =\n        hostRestEndpoint + '/asset/v1/content/assets/$page=100&$pagesize=200';\n\n    // console.log(__dirname);\n\n    var categories = JSON.parse(fs.readFileSync(__dirname + '/categories.json'));\n\n    let catTree = buildCategoryTree(categories);\n\n    return catTree;\n};\n\nmodule.exports = {\n    buildCategoryTree: buildCategoryTree,\n    findTopCategoryId: findTopCategoryId,\n    findCategory: findCategory,\n    getAllCategories: getAllCategories\n};"]}